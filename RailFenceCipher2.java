package TranspositionCiphers;
import java.util.*;
public class RailFenceCipher2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//System.out.println(); //can be generated by typing syso crtl + space
		Scanner ob =new Scanner(System.in);
		System.out.print("Enter the plaintext: ");
		String plaintext = ob.nextLine();
		System.out.print("Enter the key: ");
		int key = ob.nextInt();
		String ciphertext = convertToCipher(plaintext, key);
		System.out.println("The ciphertext is: "+ ciphertext);
		System.out.println("The plaintext is: "+ convertToPlain(ciphertext, key));
		ob.close();
	}
	private static String convertToPlain(String ciphertext, int key) {
		// TODO Auto-generated method stub
		String plaintext1= "";
		int length = ciphertext.length();
		char plain[][] = new char[key][length];
		int row=0, col=0, index =0, k= -1;
		
		for(int i=0; i<key; i++)
			for(int j=0; j< length; j++)
				plain[i][j] = '\n';
		
		for(int i=0; i< length; i++) {	//putting * in the place where cipher message exist
			plain[row][col++] = '*';
			
			if(row==0 || row==key-1)
				k = k*-1;
			row += k;
		}
		
		for(int i=0; i<key; i++) 
			for(int j=0; j<length; j++)
				if(plain[i][j] == '*')
					plain[i][j] = ciphertext.charAt(index++);
		
		row=0; col=0; k= -1;
		for(int i=0; i< length; i++) {	//putting * in the place where cipher message exist
			plaintext1 += plain[row][col++];
			
			if(row==0 || row==key-1)
				k = k*-1;
			row += k;
		}
		return plaintext1;
	}
	private static String convertToCipher(String plaintext, int key) {
		// TODO Auto-generated method stub
		int length = plaintext.length();
		String ciphertext="";
		char cipher[][] = new char[key][length];
		int row=0, col=0, k= -1;
		
		for(int i=0; i<key; i++) 
			for(int j=0; j<length; j++)
				cipher[i][j]= '\n';
					
		
		for(int i=0; i< length; i++) {
			char ch = plaintext.charAt(i);
			cipher[row][col++] = ch;
			
			if(row==0 || row==key-1)
				k = k*-1;
			
			row += k;
		}
		
		
		for(int i=0; i<key; i++) 
			for(int j=0; j<length; j++)
				if(cipher[i][j] != '\n')
					ciphertext += cipher[i][j]; 
					//System.out.print(cipher[i][j]);
		return ciphertext;
	}
}
